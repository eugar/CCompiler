#include "ccompiler.hpp"
#include <iostream>
#include <fstream>
#include <unistd.h>

using namespace std;

Compiler::Compiler()
{
    m_scanner = Scanner();
    m_expressionList = vector<Expression>();
}

// Gets the expressions generated by the scanner to eventually
// be interpreted. Returns the list of expressions.
vector<Expression> &Compiler::getExpressions()
{
    if (m_expressionList.size() == 0)
    {
        cout << "No expressions. Please call compile first" << endl;
    }

    return m_expressionList;
}

/**
 * [Variable::getVariables gets variables that have been declared]
 * @return [the list of variables]
 */
// Gets variables that have been declared. Returns the
// list of variables.
vector<Variable> &Compiler::getVariables()
{
    if (m_variableList.size() == 0)
    {
        cout << "No variables declared" << endl;
    }
    return m_variableList;
}

/**
 * [Compiler::addVariable adds a new variable that has been declared]
 * @param var [the variable being declared]
 */
// Adds a new variable to the variable list.
// Returns the new variable.
void Compiler::addVariable(Variable var) // The new variable
{
    m_variableList.push_back(var);
}

// Calls scanFile and generates expressions
void Compiler::compile(string filename) // Path of the file
{

    // populate tokenList
    m_scanner.scanFile(filename, m_tokenList);
    // parse tokens
    m_parser.parseTokens(m_tokenList);
    // do more stuff
}

// Prints the list of tokens.
void Compiler::printTokens()
{
    for (auto it = m_tokenList.begin(); it != m_tokenList.end(); it++)
    {
        m_scanner.printTokens(it->first, it->second);
    }
}

int main(int argc, char * const argv[])
{
    int c;
    int printTokens = 0;
    int printTree = 0;

    Compiler compiler = Compiler();

    if (argc < 2)
    {
HELP:
        cout << "ccompiler - compile a C file\n"
            << "Usage:\n"
            << argv[0] << " [FILE]\n"
            << "Optional arguments:\n"
            << "-h displays this help menu\n"
            << "-s displays list of tokens\n"
            << "-p displays parse tree\n";
        return 1;
    }

    while ((c = getopt(argc, argv, "?:hsp")) != -1)
    {
        switch (c)
        {
            case 's':
                printTokens = 1;
                break;
            case 'p':
                printTree = 1;
            case 'h':
                goto HELP;
        }
    }

    if (optind != argc-1)
    {
        cout << "Invalid number of arguments.\n";
        return 1;
    }

    string filename = argv[optind];


    compiler.compile(filename);

    if (printTokens)
    {
        compiler.printTokens();
    }

    if (printTree)
    {
        //print tree
    }

    return 0;
}
